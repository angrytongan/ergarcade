'use strict';

import { dateTime } from '/js/utils/datetime.js';
import { graphLoader } from '/js/chart-load.js';

/*
 * Generated by gen.js
 */
const generators = {
    bikeergDamper10: {
        rpm: {
            speed: (x) => 0.522 * x + 0.36,
            power: (x) => 0.15 * Math.pow(x, 2) - 6.6 * x + 94, // (quadratic)
            calhour: (x) => 0.515 * Math.pow(x, 2) - 22.69 * x + 623.3, // (quadratic)
        },
        speed: {
            rpm: (x) => 1.91532 * x - 0.680267,
            power: (x) => 0.535971 * Math.pow(x, 2) - 12.3913 * x + 91.9012, // (quadratic)
            calhour: (x) => 1.84039 * Math.pow(x, 2) - 42.6118 * x + 616.242, // (quadratic)
        },
        power: {
            rpm: (x) => -0.000447704 * Math.pow(x, 2) + 0.262179 * x + 22.828, // (quadratic)
            speed: (x) => -0.000227928 * Math.pow(x, 2) + 0.135399 * x + 12.3324, // (quadratic)
            calhour: (x) => 3.42914 * x + 299.717, // (linear)
        },
        calhour: {
            rpm: (x) => -0.000038153 * Math.pow(x, 2) + 0.0994102 * x - 3.55479, // (quadratic)
            speed: (x) => -0.0000194242 * Math.pow(x, 2) + 0.0511711 * x - 1.26724, // (quadratic)
            power: (x) => 0.291618 * x - 87.4028,
        },
    },
    bikeergDamper8: {
        rpm: {
            speed: (x) => 0.484 * x + 0.62,
            power: (x) => 0.1075 * Math.pow(x, 2) - 4.045 * x + 49.65, // (quadratic)
            calhour: (x) => 0.37 * Math.pow(x, 2) - 13.98 * x + 471.6, // (quadratic)
        },
        speed: {
            rpm: (x) => 2.0659 * x - 1.27625,
            power: (x) => 0.486513 * Math.pow(x, 2) - 10.1252 * x + 67.1937, // (quadratic)
            calhour: (x) => 1.67422 * Math.pow(x, 2) - 34.9556 * x + 531.92, // (quadratic)
        },
        power: {
            rpm: (x) => -0.000595192 * Math.pow(x, 2) + 0.305096 * x + 23.1028, // (quadratic)
            speed: (x) => -0.000305543 * Math.pow(x, 2) + 0.151424 * x + 11.6723, // (quadratic)
            calhour: (x) => 3.43191 * x + 299.099,
        },
        calhour: {
            rpm: (x) => -0.0000506986 * Math.pow(x, 2) + 0.119363 * x - 8.08206, // (quadratic)
            speed: (x) => -0.0000260215 * Math.pow(x, 2) + 0.059754 * x - 3.88145, // (quadratic)
            power: (x) => 0.291383 * x - 87.1523, // (linear)
        },
    },
    bikeergDamper6: {
        rpm: {
            speed: (x) => 0.43 * x + 0.45,
            power: (x) => 0.08 * Math.pow(x, 2) - 3.28 * x + 44.1, // (quadratic)
            calhour: (x) => 0.2725 * Math.pow(x, 2) - 11.095 * x + 447.65, // (quadratic)
        },
        speed: {
            rpm: (x) => 2.32432 * x - 1.02162,
            power: (x) => 0.448556 * Math.pow(x, 2) - 8.64823 * x + 53.5101, // (quadratic)
            calhour: (x) => 1.52789 * Math.pow(x, 2) - 29.2787 * x + 479.64, // (quadratic)
        },
        power: {
            rpm: (x) => -0.00128707 * Math.pow(x, 2) + 0.446503 * x + 23.0089, // (quadratic)
            speed: (x) => -0.000577043 * Math.pow(x, 2) + 0.195696 * x + 10.248, // (quadratic)
            calhour: (x) => 3.42532 * x + 299.615,
        },
        calhour: {
            rpm: (x) => -0.000109211 * Math.pow(x, 2) + 0.195529 * x - 25.7464, // (quadratic)
            speed: (x) => -0.0000489462 * Math.pow(x, 2) + 0.0863322 * x - 11.2125, // (quadratic)
            power: (x) => 0.291942 * x - 87.4703, // (linear)
        },
    },
    bikeergDamper4: {
        rpm: {
            speed: (x) => 0.358 * x + 0.71,
            power: (x) => 0.04 * Math.pow(x, 2) - 1.02 * x + 0.6, // (quadratic),
            calhour: (x) => 0.1375 * Math.pow(x, 2) - 3.555 * x + 303.65, // (quadratic),
        },
        speed: {
            rpm: (x) => 2.78903 * x - 1.89623,
            power: (x) => 0.429687 * Math.pow(x, 2) - 7.98859 * x + 47.7546, // (quadratic),
            calhour: (x) => 1.474 * Math.pow(x, 2) - 27.4745 * x + 464.658, // (quadratic),
        },
        power: {
            rpm: (x) => -0.00102774 * Math.pow(x, 2) + 0.447032 * x + 30.0767, // (quadratic),
            speed: (x) => -0.000507657 * Math.pow(x, 2) + 0.18064 * x + 10.9213, // (quadratic),
            calhour: (x) => 3.42314 * x + 299.918,
        },
        calhour: {
            rpm: (x) => -0.0000881628 * Math.pow(x, 2) + 0.183729 * x - 17.1237, // (quadratic),
            speed: (x) => -0.0000434461 * Math.pow(x, 2) + 0.0789027 * x - 8.8432, // (quadratic),
            power: (x) => 0.292128 * x - 87.614,
        },
    },
    bikeergDamper2: {
        rpm: {
            speed: (x) => 0.3 * x + 0.1,
            power: (x) => 0.035 * Math.pow(x, 2) - 1.95 * x + 35, // (quadratic)
            calhour: (x) => 0.1225 * Math.pow(x, 2) - 6.945 * x + 425.85, // (quadratic)
        },
        speed: {
            rpm: (x) => 3.33333 * x - 0.333333,
            power: (x) => 0.388889 * Math.pow(x, 2) - 6.57778 * x + 35.6539, // (quadratic)
            calhour: (x) => 1.36111 * Math.pow(x, 2) - 23.4222 * x + 428.179, // (quadratic)
        },
        power: {
            rpm: (x) => -0.00504204 * Math.pow(x, 2) + 0.936835 * x + 29.018, // (quadratic)
            speed: (x) => -0.00151261 * Math.pow(x, 2) + 0.28105 * x + 8.80539, // (quadratic)
            calhour: (x) => 3.43851 * x + 299.087,
        },
        calhour: {
            rpm: (x) => -0.000434881 * Math.pow(x, 2) + 0.53519 * x - 92.2985, // (quadratic)
            speed: (x) => -0.000130464 * Math.pow(x, 2) + 0.160557 * x - 27.5896, // (quadratic)
            power: (x) => 0.29082 * x - 86.98, // (linear)
        },
    },
};

const label = (v) => {
    switch (v) {
        case 'ad6': return 'AirDyne6';
        case 'aab': return 'Assault Air Bike';
        case 'echo': return 'Echo Bike';
        case 'bikeergDamper10': return 'Damper 10';
        case 'bikeergDamper8': return 'Damper 8';
        case 'bikeergDamper6': return 'Damper 6';
        case 'bikeergDamper4': return 'Damper 4';
        case 'bikeergDamper2': return 'Damper 2';

        case 'speed': return 'Pace';
        case 'rpm': return 'RPM';
        case 'power': return 'Power';
        case 'calhour': return 'cal/hr';
    };
};

const vs = (dims, apparatus, options = {}) => {
    const xAxis = [];
    const yAxis = [];
    const dataset = [];
    const series = [];
    const legend = [];
    const tooltip = [];
    const dataZoom = [];
    const title = [];

    const units = (k, v, trim = false) => {
        switch (k) {
            case 'speed': return `${v ? dateTime.secs2mmss(3600/v) : 0}`;
            case 'rpm': return `${v.toFixed()}rpm`;
            case 'power': return `${v.toFixed()}W`;
            case 'calhour': return trim ? `${(v / 1000).toFixed()}kcal/hr` : `${v.toFixed()}cal/hr\n(${(v/60).toFixed(1)}cal/min)`;
        };
    };

    legend.push({
        top: '10%',
        type: 'scroll',
    });

    title.push({
        left: 'middle',
        textAlign: 'middle',
        text: `BikeErg ${label(dims[0])} vs ${label(dims[1])}`,
    });

    tooltip.push({
        trigger: 'axis',
        axisPointer: {
            type: 'cross',
            label: {
                show: true,
                formatter: (params) => units(params.axisDimension === 'x' ? dims[0] : dims[1], +params.value),
            },
        },
        formatter: (params) => {
            params.sort((a, b) => a.value[dims[1]] < b.value[dims[1]] ? 1 : a.value[dims[1]] > b.value[dims[1]] ? -1 : 0);

            return units(dims[0], params[0].value[dims[0]]) + '<br />' + params.reduce((acc, val) => {
                if (!val.value[dims[1]]) {
                    return acc;
                }

                return acc + `${val.marker} ${units(dims[1], val.value[dims[1]])} ${val.seriesName}<br />`;
            }, '');
        },
    });

    xAxis.push({
        name: label(dims[0]),
        nameLocation: 'middle',
        nameGap: 30,
        axisLabel: {
            formatter: (value) => units(dims[0], +value, true),
        },
        min: options.min,
        max: options.max,
    });
    yAxis.push({
        name: label(dims[1]),
        nameLocation: 'middle',
        nameGap: 50,
        axisLabel: {
            formatter: (value) => units(dims[1], +value, true),
        },
    });

    dataZoom.push({
        type: 'slider',
        xAxisIndex: 0,
        labelFormatter: (value) => units(dims[0], +value),
    },{
        type: 'slider',
        yAxisIndex: 0,
        labelFormatter: (value) => units(dims[1], +value),
        right: '3%',
    });

    apparatus.forEach((a, i) => {
        const generator = generators[a][dims[0]][dims[1]];

        const gen = (f, o) => {
            const data = [];

            if (f) {
                for (let i = o.min; i <= o.max; i += o.step) {
                    const foo = {};
                    foo[dims[0]] = options.xMultiplier ? i * options.xMultiplier : i;
                    foo[dims[1]] = options.yMultiplier ? f(i) * options.yMultiplier : f(i);
                    data.push(foo);
                }
            }
            return data;
        };

        dataset.push({
            dimensions: [ dims[0], dims[1] ],
            source: gen(generator, options),
        });

        series.push({
            type: 'line',
            name: label(a),
            encode: {
                x: dims[0],
                y: dims[1],
            },
            datasetIndex: i,
            symbolSize: 2,
            connectNulls: true,
        });
    });

    return {
        xAxis,
        yAxis,
        dataset,
        series,
        legend,
        title,
        tooltip,
        //dataZoom,
    };
};

const apparatus = Object.keys(generators);
const options = {
    rpm: { min: 30, max: 100, step: 1 },
};

const airbike = {
    RPMVsSpeed: () => vs([ 'rpm', 'speed' ], apparatus, options['rpm']),
    RPMVsPower: () => vs([ 'rpm', 'power' ], apparatus, options['rpm']),
    RPMVsCalHour: () => vs([ 'rpm', 'calhour' ], apparatus, options['rpm']),
};

export const graphs = [
    { div: 'graph-rpm-vs-speed', options: airbike.RPMVsSpeed },
    { div: 'graph-rpm-vs-power', options: airbike.RPMVsPower },
    { div: 'graph-rpm-vs-calhour', options: airbike.RPMVsCalHour },
];

document.addEventListener('DOMContentLoaded', () => {
    graphLoader(graphs);
});
